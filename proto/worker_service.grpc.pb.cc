// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: worker_service.proto

#include "worker_service.pb.h"
#include "worker_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace workerservice {

static const char* WorkerService_method_names[] = {
  "/workerservice.WorkerService/GetReplayData",
  "/workerservice.WorkerService/JoinEvents",
};

std::unique_ptr< WorkerService::Stub> WorkerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WorkerService::Stub> stub(new WorkerService::Stub(channel, options));
  return stub;
}

WorkerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetReplayData_(WorkerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinEvents_(WorkerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WorkerService::Stub::GetReplayData(::grpc::ClientContext* context, const ::workerservice::WorkerQueryRequest& request, ::workerservice::WorkerQueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::workerservice::WorkerQueryRequest, ::workerservice::WorkerQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetReplayData_, context, request, response);
}

void WorkerService::Stub::async::GetReplayData(::grpc::ClientContext* context, const ::workerservice::WorkerQueryRequest* request, ::workerservice::WorkerQueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::workerservice::WorkerQueryRequest, ::workerservice::WorkerQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReplayData_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::GetReplayData(::grpc::ClientContext* context, const ::workerservice::WorkerQueryRequest* request, ::workerservice::WorkerQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReplayData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::workerservice::WorkerQueryResponse>* WorkerService::Stub::PrepareAsyncGetReplayDataRaw(::grpc::ClientContext* context, const ::workerservice::WorkerQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::workerservice::WorkerQueryResponse, ::workerservice::WorkerQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetReplayData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::workerservice::WorkerQueryResponse>* WorkerService::Stub::AsyncGetReplayDataRaw(::grpc::ClientContext* context, const ::workerservice::WorkerQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetReplayDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorkerService::Stub::JoinEvents(::grpc::ClientContext* context, const ::workerservice::JoinEventsRequest& request, ::workerservice::JoinEventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::workerservice::JoinEventsRequest, ::workerservice::JoinEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JoinEvents_, context, request, response);
}

void WorkerService::Stub::async::JoinEvents(::grpc::ClientContext* context, const ::workerservice::JoinEventsRequest* request, ::workerservice::JoinEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::workerservice::JoinEventsRequest, ::workerservice::JoinEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinEvents_, context, request, response, std::move(f));
}

void WorkerService::Stub::async::JoinEvents(::grpc::ClientContext* context, const ::workerservice::JoinEventsRequest* request, ::workerservice::JoinEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::workerservice::JoinEventsResponse>* WorkerService::Stub::PrepareAsyncJoinEventsRaw(::grpc::ClientContext* context, const ::workerservice::JoinEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::workerservice::JoinEventsResponse, ::workerservice::JoinEventsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JoinEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::workerservice::JoinEventsResponse>* WorkerService::Stub::AsyncJoinEventsRaw(::grpc::ClientContext* context, const ::workerservice::JoinEventsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJoinEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

WorkerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::workerservice::WorkerQueryRequest, ::workerservice::WorkerQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::workerservice::WorkerQueryRequest* req,
             ::workerservice::WorkerQueryResponse* resp) {
               return service->GetReplayData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorkerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorkerService::Service, ::workerservice::JoinEventsRequest, ::workerservice::JoinEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::workerservice::JoinEventsRequest* req,
             ::workerservice::JoinEventsResponse* resp) {
               return service->JoinEvents(ctx, req, resp);
             }, this)));
}

WorkerService::Service::~Service() {
}

::grpc::Status WorkerService::Service::GetReplayData(::grpc::ServerContext* context, const ::workerservice::WorkerQueryRequest* request, ::workerservice::WorkerQueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorkerService::Service::JoinEvents(::grpc::ServerContext* context, const ::workerservice::JoinEventsRequest* request, ::workerservice::JoinEventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace workerservice

